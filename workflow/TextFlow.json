{
  "name": "TextFlow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "cd2012cd-c7ea-4d99-bbbe-bc4884a6728a",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "3b895173-6254-4acd-bf59-50df08c1abb6",
      "name": "Webhook containing audio to transcribe",
      "type": "n8n-nodes-base.webhook",
      "position": [
        448,
        16
      ],
      "webhookId": "cd2012cd-c7ea-4d99-bbbe-bc4884a6728a",
      "typeVersion": 2
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200
        }
      },
      "id": "eb095abb-564a-4c5e-a5f2-64327c4cb562",
      "name": "Respond to Webhook with transcript",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        2080,
        304
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.31.30.231:3000/tts",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\",\n  \"X-API-Key\": \"mykey\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"{{ $json.text }}\",\n  \"voice\": \"zh-CN-XiaoxiaoNeural\"\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1504,
        16
      ],
      "id": "1990da23-c753-4184-9b76-08818d3c2fef",
      "name": "tts-service"
    },
    {
      "parameters": {
        "jsCode": "// 单条输入场景\nconst raw = $input.first().json.output || \"\";\nlet input = raw.replace(/<thinking>[\\s\\S]*?<\\/thinking>\\s*/g, '');\n// 帮你看两种“看得见/看不见”的情况\nconst stringified = JSON.stringify(input);    // 用于查看字符串的 JSON 表示（会显示转义）\nconst hasEscaped = /\\\\n/.test(stringified);   // 文本里是否包含字面 \"\\n\"\nconst hasRealNewline = /\\n/.test(input);      // 文本里是否包含实际换行字符\n\n// 三种处理（按需使用）\n// 1) 删除字面 \\n （把两个字符 \"\\\" + \"n\" 删掉）\nlet cleaned_remove_escaped = input.replace(/\\\\n/g, \"\");\n\n// 2) 把字面 \\n 转成真实的换行\nlet cleaned_convert_to_newline = input.replace(/\\\\n/g, \"\\n\");\n\n// 3) 删除真实的换行（包括 \\r\\n）\nlet cleaned_remove_real = input.replace(/\\r\\n/g, \"\").replace(/\\n/g, \"\");\n\nreturn {\n  json: {\n    original: input,\n    stringified,\n    hasEscaped,\n    hasRealNewline,\n    cleaned_remove_escaped,\n    cleaned_convert_to_newline,\n    cleaned_remove_real\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        16
      ],
      "id": "98c18345-6043-4f5e-a3df-91ecb0c83508",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node (JavaScript)\nconst inputText = $input.first().json.cleaned_remove_real || \"测试文本\";  \nconst voice = \"zh-CN-XiaoxiaoNeural\";\n\n// 1. 确保文本是字符串\nlet safeText = String(inputText);\n\n// 2. 自动转义双引号，避免 JSON 解析出错\nsafeText = safeText.replace(/\"/g, '\\\\\"');\n\n// 3. 构造 TTS 需要的 JSON\nconst payload = {\n  text: safeText,\n  voice: voice\n};\n\n// 输出给下一个节点（例如 HTTP Request 去调用 Azure TTS）\nreturn [{\n  json: payload\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        16
      ],
      "id": "afe79570-4880-4cb1-a4ee-1b92deea3deb",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1680,
        16
      ],
      "id": "a18c73e5-7dc3-461c-a274-d785b573be2f",
      "name": "Extract from File"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1920,
        304
      ],
      "id": "11deb015-b2e0-45c3-a735-7d04726d8664",
      "name": "Merge1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}\nPlease use English to reply.",
        "options": {
          "systemMessage": "<role>\n你是“Lingo”，一位风趣幽默、善于引导的语言教练。你的核心人设是：**坚信学习语言的终极动力是“与另一个灵魂产生连接”**。因此，你的教学风格大胆、实用，尤其擅长指导学生在各种社交场景（包括浪漫的、专业的或友好的）中自信地表达自己。你热爱咖啡馆氛围，常用绘画和科技作比喻，让你的指导既具体又富有创意。\n</role>\n\n<core_interaction_rule> 【绝对核心法则】\n1.  **母语拦截与引导**：当用户用中文（母语）向你提问或对话时，你**绝不能**直接用中文回答内容本身。\n2.  **三步教学法**：你必须严格遵循以下步骤：\n    a. **引导**：先告诉用户：“嘿，这个问题用英文可以这样问：[提供标准且地道的英文问句]”。\n    b. **要求尝试**：紧接着鼓励用户：“来，试着用英文问我一遍吧？”\n    c. **回应与阐释**：等用户用英文（即使不完美）重复后，你再用地道的英文回答他的问题。最后，再用中文解释一遍你刚才的英文回答是什么意思，并肯定用户的尝试。\n\n3.  **个性激发**：你可以主动设计一些与“建立连接”（例如：打招呼、赞美、深入对话、解决冲突）相关的挑战任务，特别是融入用户感兴趣的绘画和科技领域。\n</core_interaction_rule>\n\n<teaching_style>\n- **挑战驱动**：你的课程由一个个“社交任务”或“对话挑战”组成。\n- **双难度选择**：每个任务都提供“标准版”和“高手版”两个选项，让用户选择自己的舒适区。\n- **反馈聚焦**：反馈时，先狠狠夸奖用户的勇气和亮点（用词、发音、想法等），再以“如果这样说，可能会更自然……”的方式提供1个优化建议。\n- **保持焦点**：如果闲聊偏离学习目标，用一句“对了，我们刚才的英文挑战……”自然地拉回主题。\n</teaching_style>\n\n<user_info>\n学生：Min\n兴趣：arts，music\n母语：english\n目标语言：chinese\n当前水平：beginner\n</user_info>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        720,
        16
      ],
      "id": "a5d81d2f-bfc9-4901-b009-049cb175e12a",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": "amazon.nova-pro-v1:0",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
      "typeVersion": 1.1,
      "position": [
        720,
        240
      ],
      "id": "6af2b7d8-7744-45e5-8ea6-9625d18cbf94",
      "name": "AWS Bedrock Chat Model",
      "credentials": {
        "aws": {
          "id": "IFyeSduSbfRHAxXT",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "https://n8n.smart87.me/mcp/9eff9c03-b168-44a6-bd95-5d01f3166cb1",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        864,
        240
      ],
      "id": "bef8fc03-7398-455d-ae35-3b93457cbb19",
      "name": "MCP Client"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        448,
        -128
      ],
      "id": "88e961b5-0149-4372-a52e-2efee599c88d",
      "name": "When chat message received",
      "webhookId": "7688dee8-711a-411d-9e96-82d8c6c48abd"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.31.30.231:3011/tts",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.text }}"
            },
            {
              "name": "voice",
              "value": "Zhiyu"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1504,
        -144
      ],
      "id": "60c14c5d-d302-4b42-9b87-ccd5625c3cb2",
      "name": "tts-service1"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1680,
        -144
      ],
      "id": "82aa48df-c815-48a4-9173-443b1b409d6e",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        448,
        192
      ],
      "id": "6598d975-2dd5-4589-816d-5d4b3dfe6197",
      "name": "When Executed by Another Workflow"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook containing audio to transcribe": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tts-service": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          },
          {
            "node": "tts-service1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        []
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Respond to Webhook with transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS Bedrock Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tts-service1": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c238405c-dbe6-43ec-b3af-b6b22682cf28",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "103a46b1e16c7dcad7372c67388b5377ecdcf9c2d3cb2af984f129ade87c3692"
  },
  "id": "bc35SH5j2ueh7NcZ",
  "tags": []
}